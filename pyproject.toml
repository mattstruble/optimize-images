[tool.poetry]
name = "responsive-images"
version = "0.1.0"
description = "A multi format lossless image optimizer for web"
authors = ["Matt Struble <mattstruble@outlook.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/mattstruble/responsive-images"
documentation = "https://github.com/mattstruble/responsive-images"
keywords = ["image", "png", "jpg", "jpeg", "cbz", "cbr", "exif", "responsive", "mozjpeg"]
classifiers = [
    "Topic :: Internet :: WWW/HTTP :: Site Management",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Environment :: Console",
    "Programming Language :: Python :: 3 :: Only",
    "Typing :: Typed",
]

[tool.poetry.urls]
"Source" = "https://github.com/mattstruble/responsive-images"
"Issues" = "https://github.com/mattstruble/responsive-images/issues"

[tool.poetry.dependencies]
python = "^3.9"
picopt = "^3.3.6"
Wand = "^0.6.11"

[tool.poetry.group.dev.dependencies]
black = "^23.9.1"
codespell = "^2.2.5"
coverage = "^7.3.1"
pyright = "^1.1.327"
pytest = "^7.4.2"
pytest-cov = "^4.1.0"
pytest-gitignore = "^1.3"
radon = "^6.0.1"
ruff = "^0.0.290"
bandit = "^1.7.5"
mypy = "^1.5.1"

[tool.bandit]
exclude = ".tox,.eggs,tests,test_*,venv"

[tool.black]
exclude = "/(.git|.mypy_cache|.pytest_cache|.venv|__pycache__|dist|node_modules|test-results|typings)/"

[tool.codespell]
skip = ".git,.mypy_cache,.pytest_cache,.venv,*~,./dist,./node_modules,./package-lock.json,./poetry.lock,./test-results"
builtin = "clear,rare,code"
check-hidden = true

[tool.coverage.run]
source = ["app"]
branch = true
concurrency = ["multiprocessing"]
omit = [
  ".git/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
  ".venv/*",
  "*__pycache__*",
  "dist/*",
  "node_modules/*",
  "test-results/*",
  "typings/*"
]

[tool.coverage.html]
directory = "test-results/coverage"

[tool.mypy]
python_version = "3.9"
exclude = ".tox,.eggs,tests,test_*,venv"
disallow_untyped_decorators = true
warn_unused_configs = true
disallow_subclassing_any = false
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
ignore_missing_imports = false
pretty = true
show_error_codes = true

[tool.pytest.ini_options]
junit_family = "xunit2"
addopts = """
  --junitxml=test-results/pytest/junit.xml
  -ra
  --strict-markers
  --cov
  --cov-append
  --cov-report=html
  --cov-report=term
  --ignore=.git
  --ignore=.mypy_cache
  --ignore=.pytest_cache
  --ignore=.venv
  --ignore=dist
  --ignore=node_modules
  --ignore=test-results
  --ignore=typings
  --ignore=vulture_whitelist.py
  --ignore-glob=*__pycache__*
"""

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/node_modules",
  ".git",
  ".mypy_cache",
  ".pytest_cache",
  ".venv",
  "dist",
  "package-lock.json",
  "poetry.lock",
  "test-results",
  "typings",
  "vulture_whitelist.py"
]
useLibraryCodeForTypes = true
reportMissingImports = true
reportImportCycles = true

[tool.radon]
exclude = "*~,.git/*,.mypy_cache/*,.pytest_cache/*,.venv/*,__pycache__/*,dist/*,node_modules/*,test-results/*,typings/*"

[tool.ruff]
extend-exclude = ["cache", "codex/_vendor_haystack", "frontend", "typings"]
ignore = ["S101", "D203", "D213"]
extend-select = [
  "A",
  "ARG",
  "B",
  "B9",
  "C",
  "C4",
  "C90",
  "D",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "EXE",
  "F",
  "I",
  "ICN",
  "INP",
  "ISC",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "N",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "T10",
  "T20",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT"
]
external = ["V101"]
target-version = "py39"
task-tags = ["TODO", "FIXME", "XXX", "http", "HACK"]

[tool.ruff.per-file-ignores]
"tests/*" = ["SLF001", "T201", "T203"]

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
